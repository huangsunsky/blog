<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell script on cheon&#39;s blog</title>
    <link>https://www.cheon.site/blog/shell/</link>
    <description>Recent content in shell script on cheon&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Oct 2017 16:55:56 +0800</lastBuildDate>
    
	<atom:link href="https://www.cheon.site/blog/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerfile Tips</title>
      <link>https://www.cheon.site/blog/shell/dockerfile_tips/</link>
      <pubDate>Thu, 13 Jun 2019 13:51:36 +0800</pubDate>
      
      <guid>https://www.cheon.site/blog/shell/dockerfile_tips/</guid>
      <description>Dockerfile 编写建议 日常编写Dockerfile的过程中总结的一些经验:
 基础镜像尽量选择alpine版本，减小镜像体积，如果需要glibc，在Dockerfile中添加以下指令
RUN apk --no-cache add ca-certificates wget &amp;amp;&amp;amp; \ wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub &amp;amp;&amp;amp; \ wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.29-r0/glibc-2.29-r0.apk &amp;amp;&amp;amp; \ apk --no-cache add glibc-2.29-r0.apk  关于在alpine镜像中安装glibc，详情可以参考github介绍
 在Dockerfile里需要安装软件的尽量使用国内的源，加快ci构建，常见的操作如下：
 alpine:
RUN sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories debian:
curl -L &amp;#34;https://mirrors.ustc.edu.cn/repogen/conf/debian-https-4-buster&amp;#34; -o /etc/apt/sources.list centos:
RUN curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo node:
RUN npm install --registry=https://registry.npm.taobao.org \ &amp;amp;&amp;amp; npm config set phantomjs_cdnurl https://npm.taobao.org/dist/phantomjs \ &amp;amp;&amp;amp; npm config set chromedriver_cdnurl http://cdn.</description>
    </item>
    
    <item>
      <title>Es Clean Indices</title>
      <link>https://www.cheon.site/blog/shell/es_clean_indices/</link>
      <pubDate>Wed, 12 Jun 2019 16:00:30 +0800</pubDate>
      
      <guid>https://www.cheon.site/blog/shell/es_clean_indices/</guid>
      <description>ES 清理索引 使用阿里云的 ES 服务存储应用的日志，随着业务的增长和 ES 的资源限制，索引过多会引起 ES 的崩溃。 日志的采集是通过 logback 发送到 kafka，再用 logstash 消费 kafka 并转发给 ES。logstash 配置了%{[@metadata][kafka][topic]}-%{+YYYY-MM-dd}作为 ES 的索引。 经过讨论准备只将日志存储一个月，需要定时去清理索引，防止索引过多。
获取索引 首先要做的是获取当前的索引，通过查阅 ES 的 API 可知，可以用 /_cat/indices 接口来获取所有索引:
curl -X POST -s &amp;#34;http://es.example.site/_cat/indices&amp;#34; 可以看到如下结果:
green open test-app1-prod-log-2019-06-11 28NbwQbZTIaGPgb0S5Wkuw 5 1 189385 0 179.7mb 89.9mb green open test-app1-prod-log-2019-06-10 0EiQBNhZTnGZqUZ92J9UEg 5 1 189385 0 179.7mb 93.3mb green open test-app2-prod-log-2019-06-08 N_Th5gahSiu3kiycF26Q_A 5 1 2133105 0 4.5gb 2.2gb 需要将结果过滤一下，只保留 %{[@metadata][kafka][topic]} 的信息:</description>
    </item>
    
    <item>
      <title>Interesting Shell Commands</title>
      <link>https://www.cheon.site/blog/shell/interesting_shell_commands/</link>
      <pubDate>Wed, 25 Apr 2018 18:16:49 +0800</pubDate>
      
      <guid>https://www.cheon.site/blog/shell/interesting_shell_commands/</guid>
      <description>一些有意思的shell命令 $ printf &amp;#34;%x&amp;#34; \&amp;#39;$ $ printf \\x2F 将字符转化为16进制(%x), 十进制(%d)&amp;hellip; 第二个命令将16进制转化为字符
$ python -m SimpleHTTPServer $ python -m http.server 使用python来建立一个简易的web service用于文件传输，第一个时python2的写法，后一个是python3的写法，默认端口为8000，可以在后面直接加端口指定端口
$ nc -l localhost -p 1016 $ nc localhost 1016 $ nc -lu localhost -p 8125 $ nc -u localhost 8125 gnu-netcat软件包，使用nc命令监听1016端口，然后再用nc可以发送数据，这可以用于文件传输，做简易的聊天工具
curl -OL https://github.com/cmderdev/cmder/releases/download/v1.3.2/cmder.zip curl -Ss &amp;#34;https://store.docker.com/api/content/v1/repositories/public/library/$@/tags?page_size=25&amp;amp;page=1&amp;#34; | jq &amp;#39;.&amp;#34;results&amp;#34;[][&amp;#34;name&amp;#34;]&amp;#39; | sort -r curl -X POST -H &amp;#34;Content-Type: application/json&amp;#34; -H &amp;#34;Authorization: Basic YWRtaW46YWRtaW4xMjM=&amp;#34; &amp;#39;http://localhost:8081/service/siesta/rest/v1/script/&amp;#39; \  -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;updateAnonymousAccess&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;groovy&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;security.</description>
    </item>
    
    <item>
      <title>Bash Expansion</title>
      <link>https://www.cheon.site/blog/shell/bash_expansion/</link>
      <pubDate>Fri, 13 Oct 2017 13:43:35 +0800</pubDate>
      
      <guid>https://www.cheon.site/blog/shell/bash_expansion/</guid>
      <description>&lt;h1 id=&#34;bash-扩展&#34;&gt;bash 扩展&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>Bash Tips</title>
      <link>https://www.cheon.site/blog/shell/bash_tips/</link>
      <pubDate>Tue, 10 Oct 2017 11:20:29 +0800</pubDate>
      
      <guid>https://www.cheon.site/blog/shell/bash_tips/</guid>
      <description>&lt;h1 id=&#34;bash-代码规范建议&#34;&gt;bash 代码规范建议&lt;/h1&gt;

&lt;p&gt;Bash 可以认为是系统编程级的 JavaScript。虽然在某些时候，使用一门像 C，Go 之类的系统语言是一个更好的选择，但是对于一些小的POSIX相关或命令行任务，Bash 是一门理想的系统语言。这里有几个原因：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bash 无处不在。就像 web 上的 JavaScript，Bash 早就在系统上为系统编程准备好了。&lt;/li&gt;
&lt;li&gt;Bash 可以作为粘合剂。用 C 或 Go （或者其他任意语言）来编写复杂的部分，然后用 Bash 将它们粘合在一起。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>